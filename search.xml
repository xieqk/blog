<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Rails+Puma+Nginx+HTTPS(SSL) 网站服务搭建记录（三）：SSL(HTTPS) 证书申请及 nginx 配置</title>
      <link href="posts/1397215988.html"/>
      <url>posts/1397215988.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本系列分三篇，记录了 Rails+Puma+Nginx+HTTPS(SSL) 网站服务搭建的全部过程<br>（一）：<a href="https://blog.xieqiaokang.com/posts/246235249.html">Ubuntu 下 Ruby on rails 环境搭建及测试</a><br>（二）：<a href="https://blog.xieqiaokang.com/posts/3478891453.html">nginx 安装及配置，及 puma+nginx 运行 rails app</a><br>（三）：<a href="https://blog.xieqiaokang.com/posts/1397215988.html">SSL(HTTPS) 证书申请及 nginx 配置</a></p></blockquote><h2 id="申请-SSL-证书"><a href="#申请-SSL-证书" class="headerlink" title="申请 SSL 证书"></a>申请 SSL 证书</h2><p>为了在网站上启用 HTTPS，需要从证书颁发机构（CA）获取证书（一种文件）。此处我们从 Let’s Encrypt 处申请这种证书。Let’s Encrypt 是一个证书颁发机构（CA）。要从 Let’s Encrypt 获取您网站域名的证书，需要对域名有实际控制权。有些托管服务提供商提供 Let’s Encrypt 支持，可以帮助申请免费证书，安装并配置自动续期。此处我们使用手动方式说明如何在 Let’s Encrypt 使用 Certbot 申请 SSL 证书。</p><ul><li>Let’s Encrypt 中文官网：<a href="https://letsencrypt.org/zh-cn/">https://letsencrypt.org/zh-cn/</a></li><li>Certbot 官网：<a href="https://certbot.eff.org/">https://certbot.eff.org/</a></li></ul><p>上述官网中有 SSL 证书在不同系统，不同web服务器下申请的流程，下面仅为在 ubuntu 下的申请流程。</p><h3 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h3><p><strong>1. SSH 登陆到服务器</strong></p><p>SSH 登陆到服务器，使用带有sudo权限的用户运行 HTTP 网站</p><p><strong>2. 安装 snapd</strong></p><p>有些系统默认已经预安装好了 snap，可不用安装，如下图所示。如需安装，可参考 <a href="https://snapcraft.io/docs/installing-snapd">https://snapcraft.io/docs/installing-snapd</a> 进行安装。</p><p><img src="https://cdn.jsdelivr.net/gh/xieqk/blog-cdn/imgs/snapd.png"></p><p><strong>3. 移除所有 Certbot OS 包</strong></p><p>如果当前系统存在通过系统包管理软件（如 apt，dnf，yum等）安装的 cerbot 包，那么在使用 snap 安装之前需要首先移除他们来确保之后使用 <code>certbot</code> 命令时，用的是 snap 而不是系统自带的 cerbot。具体操作据系统而定，如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line">sudo apt-get remove certbot</span><br><span class="line"><span class="comment"># Fedora</span></span><br><span class="line">sudo dnf remove certbot</span><br><span class="line"><span class="comment"># CentOS</span></span><br><span class="line">sudo yum remove certbot</span><br></pre></td></tr></table></figure><p><strong>4. 安装 Certbor</strong></p><p>在命令行中可使用以下命令安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo snap install --classic certbot</span><br></pre></td></tr></table></figure><p><strong>5. 运行 Certbot ，获取证书</strong></p><p>停止当前运行的网站服务，通过以下命令获得证书。在申请过程中，Certbot 会临时在当前机器启动一个网络服务器。注意：申请 HTTPS 证书的域名需被解析到当前服务器的 IP 地址才可完成认证。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo certbot certonly --standalone</span><br></pre></td></tr></table></figure><p>之后按照提示操作即可。默认会生成以下两个文件：</p><ul><li>证书链（certificate and chain）：<code>/etc/letsencrypt/live/your_url.com/fullchain.pem</code></li><li>密钥文件（key file）：<code>/etc/letsencrypt/live/your_url.com/privkey.pem</code></li></ul><p>并会提示过期时间，一般有效期为3个月。</p><p><strong>6. 安装证书</strong></p><p>需要通过修改web服务器的配置文件进行安装，不同的 web 服务器安装方式有所不同，此处我们使用 nginx 进行安装，具体可参考下一节。</p><p><strong>7. 测试证书的自动更新</strong></p><p>Certbot 会自动在证书快要过期时进行更新，如果没有修改证书的设置，不需要每次都手动运行 certbot。可通过以下命令测试证书的自动刷新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo certbot renew --dry-run</span><br></pre></td></tr></table></figure><p>注意，证书更新需要开放服务器的 80 和 443 端口，如果更新失败，可先尝试暂停 nginx 服务后再手动更新。</p><p><strong>8. 确认 certbot 正常运行</strong></p><p>使用 HTTPS 访问自己的网站，如 <code>https://yourwebsite.com/</code> ，如果在浏览器 url 栏左侧出现了小锁的标志，说明已经安装成功。</p><h2 id="nginx-配置-SSL-访问"><a href="#nginx-配置-SSL-访问" class="headerlink" title="nginx 配置 SSL 访问"></a>nginx 配置 SSL 访问</h2><p>此处对 nginx 配置 SSL 访问，并将所有 HTTP 和 www 请求重定向到不带 www 的 HTTPS 站点上。</p><p>修改之前的 nginx 配置文件 <code>/etc/nginx/sites-available/my_app.conf</code> 如下即可，具体每项功能见注释：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> my_app &#123;<span class="comment"># 定义 upstream，告诉 nginx 将请求代理解析到哪里</span></span><br><span class="line">  <span class="attribute">server</span> unix:///var/run/my_app.sock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;<span class="comment"># 将来自 www.my_app.com 和 my_app.com 的 http 请求301重定向到 https 的 my_app.com (no-www)</span></span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span> default_server;</span><br><span class="line">  <span class="attribute">listen</span> [::]:<span class="number">80</span> default_server;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">server_name</span> www.my_app.com my_app.com;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">return</span> <span class="number">301</span> https://my_app.com<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">443</span> ssl http2;</span><br><span class="line">  <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl http2;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">if</span> (<span class="variable">$host</span> = www.my_app.com) &#123;<span class="comment"># 将来自 www.my_app.com 的 https 请求301重定向到 my_app.com (no-www)</span></span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://my_app.com<span class="variable">$request_uri</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">server_name</span> my_app.com;</span><br><span class="line">  <span class="attribute">root</span> /var/www/my_app/public;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># SSL configuration</span></span><br><span class="line">  <span class="attribute">ssl_certificate</span> /etc/letsencrypt/live/my_app.com/fullchain.pem;</span><br><span class="line">  <span class="attribute">ssl_certificate_key</span> /etc/letsencrypt/live/my_app.com/privkey.pem;</span><br><span class="line">  <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">  <span class="attribute">ssl_ciphers</span> HIGH:!aNULL:!MD5;</span><br><span class="line">    </span><br><span class="line">  <span class="comment"># Other configurations</span></span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://my_app; <span class="comment"># match the name of upstream directive which is defined above</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> <span class="regexp">~* ^/assets/</span> &#123;</span><br><span class="line">    <span class="comment"># Per RFC2616 - 1 year maximum expiry</span></span><br><span class="line">    <span class="attribute">expires</span> <span class="number">1y</span>;</span><br><span class="line">    <span class="attribute">add_header</span> Cache-Control public;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Some browsers still send conditional-GET requests if there&#x27;s a</span></span><br><span class="line">    <span class="comment"># Last-Modified header or an ETag header even if they haven&#x27;t</span></span><br><span class="line">    <span class="comment"># reached the expiry date sent in the Expires header.</span></span><br><span class="line">    <span class="attribute">add_header</span> Last-Modified <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> ETag <span class="string">&quot;&quot;</span>;</span><br><span class="line">    break;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，来自以下四个域名的请求：</p><ul><li><a href="http://my_app.com/">http://my_app.com</a></li><li><a href="http://www.my_app.com/">http://www.my_app.com</a></li><li><a href="https://my_app.com/">https://my_app.com</a></li><li><a href="https://www.my_app.com/">https://www.my_app.com</a></li></ul><p>都将被301重定向到 <code>https://my_app.com</code>，且这种方式，比在 nginx 中配置 rewrite 会更加高效。</p><p>至此，Rails+Puma+Nginx+HTTPS(SSL) 网站服务搭建过程全部记录于此。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Web </tag>
            
            <tag> Nginx </tag>
            
            <tag> Rails </tag>
            
            <tag> Https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rails+Puma+Nginx+HTTPS(SSL) 网站服务搭建记录（二）：nginx 安装及配置，及 puma+nginx 运行 rails app</title>
      <link href="posts/3478891453.html"/>
      <url>posts/3478891453.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本系列分三篇，记录了 Rails+Puma+Nginx+HTTPS(SSL) 网站服务搭建的全部过程<br>（一）：<a href="https://blog.xieqiaokang.com/posts/246235249.html">Ubuntu 下 Ruby on rails 环境搭建及测试</a><br>（二）：<a href="https://blog.xieqiaokang.com/posts/3478891453.html">nginx 安装及配置，及 puma+nginx 运行 rails app</a><br>（三）：<a href="https://blog.xieqiaokang.com/posts/1397215988.html">SSL(HTTPS) 证书申请及 nginx 配置</a></p></blockquote><h2 id="Ubuntu-安装-nginx"><a href="#Ubuntu-安装-nginx" class="headerlink" title="Ubuntu 安装 nginx"></a>Ubuntu 安装 nginx</h2><h3 id="完整卸载-nginx-服务器"><a href="#完整卸载-nginx-服务器" class="headerlink" title="完整卸载 nginx 服务器"></a>完整卸载 nginx 服务器</h3><p><strong>1. 首先需要停止当前的nginx服务（如果当前正在运行nginx服务）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx stop</span><br></pre></td></tr></table></figure><p><strong>2. 删除nginx及其配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt --purge remove nginx</span><br><span class="line">sudo apt autoremove</span><br></pre></td></tr></table></figure><p><strong>3. 列出与nginx相关的软件，并删除</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dpkg --get-selections|grep nginx</span><br><span class="line"></span><br><span class="line">sudo apt-get --purge remove nginx</span><br><span class="line">sudo apt-get --purge remove nginx-common</span><br><span class="line">sudo apt-get --purge remove nginx-core</span><br></pre></td></tr></table></figure><p><strong>4. 再次验证</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dpkg --get-selections|grep nginx</span><br><span class="line"><span class="built_in">which</span> nginx     <span class="comment"># 不再显示nginx</span></span><br><span class="line">whereis nginx</span><br></pre></td></tr></table></figure><h3 id="重新安装nginx服务"><a href="#重新安装nginx服务" class="headerlink" title="重新安装nginx服务"></a>重新安装nginx服务</h3><p><strong>1. 添加nginx.org官方源</strong></p><p>由于ubuntu自带的nginx版本较老，需要通过添加官方nginx.org源来安装更新的版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys ABF5BD827BD9BF62</span><br></pre></td></tr></table></figure><p><strong>2. 将下面一行内容添加到ubuntu apt源配置文件<code>/etc/apt/sources.list</code>中</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb http://nginx.org/packages/ubuntu/ precise nginx</span><br></pre></td></tr></table></figure><p><strong>3. 安装nginx包</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><p><strong>4. 验证安装</strong></p><p>一旦成功安装上之后，输入以下命令可看到当前nginx版本信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ip-xxx-xx-xx-xxx:~$ nginx -v</span><br><span class="line">nginx version: nginx/1.14.0 (Ubuntu)</span><br></pre></td></tr></table></figure><p>Ubuntu 下安装成功后，其文件结构大致为：</p><ul><li>配置文件：<code>/etc/nginx/</code> ，并且每个虚拟主机已经放在了 <code>/etc/nginx/sites-available</code> 下</li><li>程序文件：<code>/usr/sbin/nginx/</code></li><li>日志文件：<code>/var/log/nginx/</code></li><li>启动脚本：<code>/etc/init.d</code></li><li>默认的虚拟主机的目录为 <code>/var/www/nginx-default</code> (或 <code>/var/www</code>)，具体位置可参考 <code>/etc/nginx/sites-available</code>里的配置。</li></ul><p>其中配置文件目录结构如下：</p><p><img src="https://cdn.jsdelivr.net/gh/xieqk/blog-cdn/imgs/nginx-1.png" alt="Ubuntu 下 nginx 配置文件夹目录结构"></p><p><strong>5. 启动nginx服务（也可之后需要时再启动）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx start</span><br></pre></td></tr></table></figure><p>此外，nginx的常用命令还有</p><blockquote><p>重启：sudo service nginx restart</p><p>停止：sudo service nginx stop</p></blockquote><h2 id="nginx-配置"><a href="#nginx-配置" class="headerlink" title="nginx 配置"></a>nginx 配置</h2><p>我们首先需要在 nginx 配置 <code>upstream</code>，直接告诉 nginx 将请求代理解析到哪里。之后需要添加一个虚拟主机并使用 <code>proxy_pass</code> 告诉 nginx 将请求传递给 <code>upstream</code> 中定义的进程池。</p><p>具体来说，首先需要通过删除下面的符号链接 <code>sites-enabled/default</code> 来禁用掉默认的站点设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /etc/nginx/sites-enabled/default</span><br></pre></td></tr></table></figure><p>之后，创建一个新的虚拟主机配置文件在 sites-available下，如 <code>/etc/nginx/sites-available/my_app.conf</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/nginx/sites-available/my_app.conf</span><br></pre></td></tr></table></figure><p>在其中写入以下内容</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> my_app &#123;</span><br><span class="line">  <span class="attribute">server</span> unix:///var/run/my_app.sock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> my_app.com; <span class="comment"># 修改为自己的域名</span></span><br><span class="line">  <span class="attribute">root</span> /var/www/my_app/public; <span class="comment"># 可修改为自己的 rails app 的 public 文件位置</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://my_app; <span class="comment"># 需要与上面定义的 upstream 名称匹配</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> <span class="regexp">~* ^/assets/</span> &#123;</span><br><span class="line">    <span class="comment"># Per RFC2616 - 1 year maximum expiry</span></span><br><span class="line">    <span class="attribute">expires</span> <span class="number">1y</span>;</span><br><span class="line">    <span class="attribute">add_header</span> Cache-Control public;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Some browsers still send conditional-GET requests if there&#x27;s a</span></span><br><span class="line">    <span class="comment"># Last-Modified header or an ETag header even if they haven&#x27;t</span></span><br><span class="line">    <span class="comment"># reached the expiry date sent in the Expires header.</span></span><br><span class="line">    <span class="attribute">add_header</span> Last-Modified <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> ETag <span class="string">&quot;&quot;</span>;</span><br><span class="line">    break;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后我们需要创建一个符号链接从 sites-enabled 指向该配置文件启用它</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -sf /etc/nginx/sites-available/my_app.conf /etc/nginx/sites-enabled/my_app.conf</span><br></pre></td></tr></table></figure><p>重启 nginx 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure><h2 id="启动-rails-app"><a href="#启动-rails-app" class="headerlink" title="启动 rails app"></a>启动 rails app</h2><p>在使用 nginx 之前，我们可以通过以下命令以生产方式启动 rails 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译</span></span><br><span class="line">rake assets:precompile</span><br><span class="line"><span class="comment"># 启动rails服务</span></span><br><span class="line">rvmsudo rails s -e production -b 0.0.0.0 -p 80</span><br></pre></td></tr></table></figure><p>此时输出如下代表网站正常运行</p><p><img src="https://cdn.jsdelivr.net/gh/xieqk/blog-cdn/imgs/rails-1.png"></p><p>注意：这是之前没有使用 nginx 时开启 rails 应用，如果此时 nginx 正在运行中会占用 80 端口，rails 应用将无法使用 80 端口，此时可通过修改上面的 <code>-p</code> 参数修改为其它端口（如3000），来查看我们的网站。</p><p>而当我们使用 nginx 进行代理时，我们不需要指定端口（由 nginx 管理），而是启动 rails app 并告诉 puma 将其绑定到一个 unix socket 上，这个 socket 就是之前 nginx 中 <code>upstream</code> 中指定的 socket：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvmsudo bundle <span class="built_in">exec</span> puma -e production -b unix:///var/run/my_app.sock</span><br></pre></td></tr></table></figure><p>不出意外，应该得到以下输出，</p><p><img src="https://cdn.jsdelivr.net/gh/xieqk/blog-cdn/imgs/rails-2.png"></p><p>并可在浏览器中进入自己的页面看到经过 nginx 代理的网页应用（如未正常运行，需检查 nginx 服务是否开启，配置文件是否正确）。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Web </tag>
            
            <tag> Nginx </tag>
            
            <tag> Rails </tag>
            
            <tag> Https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rails+Puma+Nginx+HTTPS(SSL) 网站服务搭建记录（一）：Ubuntu 下 Ruby on rails 环境搭建及测试</title>
      <link href="posts/246235249.html"/>
      <url>posts/246235249.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本系列分三篇，记录了 Rails+Puma+Nginx+HTTPS(SSL) 网站服务搭建的全部过程<br>（一）：<a href="https://blog.xieqiaokang.com/posts/246235249.html">Ubuntu 下 Ruby on rails 环境搭建及测试</a><br>（二）：<a href="https://blog.xieqiaokang.com/posts/3478891453.html">nginx 安装及配置，及 puma+nginx 运行 rails app</a><br>（三）：<a href="https://blog.xieqiaokang.com/posts/1397215988.html">SSL(HTTPS) 证书申请及 nginx 配置</a></p></blockquote><h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><p>在以下系统环境下均通过了测试：</p><ul><li>Windows 10 WSL：Ubuntu 18.04</li><li>Ubuntu 18.04</li><li>AWS EC2：Ubuntu 18.04</li></ul><h2 id="基本安装步骤"><a href="#基本安装步骤" class="headerlink" title="基本安装步骤"></a>基本安装步骤</h2><h3 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装必要的依赖</span></span><br><span class="line">sudo apt install sqlite3 gnupg curl git libpq-dev</span><br></pre></td></tr></table></figure><h3 id="安装-RVM-Ruby-版本管理器"><a href="#安装-RVM-Ruby-版本管理器" class="headerlink" title="安装 RVM Ruby 版本管理器"></a>安装 RVM Ruby 版本管理器</h3><p>安装软件签名公钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB</span><br></pre></td></tr></table></figure><p>安装 rvm，该步骤同时也会安装上最新版本的 ruby。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.rvm.io | bash -s stable --ruby</span><br><span class="line"><span class="built_in">source</span> ~/.rvm/scripts/rvm</span><br></pre></td></tr></table></figure><p>验证安装，输出当前 rvm 版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm version</span><br></pre></td></tr></table></figure><h3 id="安装-ruby-（可选）"><a href="#安装-ruby-（可选）" class="headerlink" title="安装 ruby （可选）"></a>安装 ruby （可选）</h3><p>在安装 rvm 时，已经默认安装好 ruby 的最新版本，可直接使用。下面介绍通过 rvm 安装其它 ruby 版本的过程，及指定默认 ruby 版本的方法。</p><p>将rvm更新至最新最稳定的状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm get stable --autolibs=<span class="built_in">enable</span></span><br></pre></td></tr></table></figure><p>查看所有ruby版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm list known</span><br></pre></td></tr></table></figure><p>安装ruby</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm install ruby-2.5.1</span><br></pre></td></tr></table></figure><p>设置ruby的默认版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm --default use ruby-2.5.1</span><br></pre></td></tr></table></figure><p>查看ruby版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -v</span><br></pre></td></tr></table></figure><h3 id="安装-nodejs"><a href="#安装-nodejs" class="headerlink" title="安装 nodejs"></a>安装 nodejs</h3><p>我们需要安装 nodejs 作为 ruby 的 js 运行时环境。</p><p>添加 nodejs 仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -</span><br></pre></td></tr></table></figure><p>安装 nodejs：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y nodejs</span><br><span class="line"><span class="comment"># sudo apt install gcc g++ make</span></span><br></pre></td></tr></table></figure><h3 id="配置-ruby-gem-（可选）"><a href="#配置-ruby-gem-（可选）" class="headerlink" title="配置 ruby gem （可选）"></a>配置 ruby gem （可选）</h3><p>gem是ruby的包管理工具，在我们安装ruby的时候，他已经被自动安装上了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新 gem</span></span><br><span class="line">gem update --system</span><br><span class="line"><span class="comment"># 查看 gem 版本</span></span><br><span class="line">gem -v</span><br></pre></td></tr></table></figure><h3 id="安装-rails"><a href="#安装-rails" class="headerlink" title="安装 rails"></a>安装 rails</h3><p>使用 gem 进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install rails -v 5.2.0</span><br></pre></td></tr></table></figure><p>如果网络情况不好，可更换国内源（淘宝源）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gem 更换源，如果当前源不可用，可更换源</span></span><br><span class="line"><span class="comment">## 移除现有源</span></span><br><span class="line">gem sources -r https://rubygems.org</span><br><span class="line"><span class="comment">## 添加淘宝源</span></span><br><span class="line">gem sources -a http://ruby.taobao.org/</span><br></pre></td></tr></table></figure><p>也可添加清华源：<code>gem sources -a https://mirrors.tuna.tsinghua.edu.cn/rubygems/</code></p><p>验证安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails -v</span><br></pre></td></tr></table></figure><h3 id="测试-rails-安装是否成功"><a href="#测试-rails-安装是否成功" class="headerlink" title="测试 rails 安装是否成功"></a>测试 rails 安装是否成功</h3><p>创建 blog 应用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails new blog</span><br></pre></td></tr></table></figure><p>进入该文件夹，启动 web 服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails server -b 0.0.0.0 -p 80</span><br></pre></td></tr></table></figure><ul><li>-b：允许访问的IP地址，0.0.0.0 表示允许任何 IP 地址访问</li><li>-p：web应用端口号</li></ul><p>上述命令会启动 Puma，这是 Rails 默认使用的 Web 服务器。要查看运行中的应用，请打开浏览器窗口，访问 http://服务器IP。这时应该看到默认的 Rails 欢迎页面：</p><p><img src="https://cdn.jsdelivr.net/gh/xieqk/blog-cdn/imgs/rails-hello-world.jpg" alt="Rails 欢迎界面"></p><p>安装完成。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Web </tag>
            
            <tag> Nginx </tag>
            
            <tag> Rails </tag>
            
            <tag> Https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Conda Cheat Sheet | Conda 速查表</title>
      <link href="posts/2170262917.html"/>
      <url>posts/2170262917.html</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>conda update -n base conda</code></td><td>更新 Conda</td></tr><tr><td><code>conda update anaconda</code></td><td>将 Anaconda 所有包更新为最新稳定版本</td></tr><tr><td><code>conda info</code></td><td>验证 Conda 安装情况，检查版本号</td></tr></tbody></table><h2 id="环境管理"><a href="#环境管理" class="headerlink" title="环境管理"></a>环境管理</h2><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>conda create --name ENVNAME python=3.7</code></td><td>创建指定 python 版本的名字为 ENVNAME 的新环境</td></tr><tr><td><code>conda activate ENVNAME</code></td><td>激活 python 环境 ENVNAME</td></tr><tr><td><code>conda activate /path/to/environment-dir</code></td><td>激活硬盘某一特定位置的 conda 环境</td></tr><tr><td><code>conda deactivate</code></td><td>退出当前 conda 环境</td></tr><tr><td><code>conda list</code></td><td>列出当前 conda 环境的所有包及其版本</td></tr><tr><td><code>conda list --name ENVNAME</code></td><td>列出 conda 环境 ENVNAME 的所有包及其版本</td></tr><tr><td><code>conda remove --name ENVNAME --all</code></td><td>完整删除 conda 环境 ENVNAME</td></tr></tbody></table><h2 id="环境的分享、导出与导入"><a href="#环境的分享、导出与导入" class="headerlink" title="环境的分享、导出与导入"></a>环境的分享、导出与导入</h2><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>conda create --clone ENVNAME --name NEWENV</code></td><td>创建一个原有环境 ENVNAME 的副本 NEWENV</td></tr><tr><td><code>conda env export --name ENVNAME &gt; envname.yml</code></td><td>将环境 ENVNAME 导出为 YAML 文件</td></tr><tr><td><code>conda env create --file envname.yml</code></td><td>从 YMAL 文件创建 conda 环境</td></tr><tr><td><code>conda env create</code></td><td>从当前目录下 environment.yml 文件创建 conda 环境</td></tr><tr><td><code>conda list --explicit &gt; pkgs.txt</code></td><td>导出当前环境所有包的具体版本</td></tr><tr><td><code>conda create --name NEWENV --file pkgs.txt</code></td><td>根据所有包的具体版本创建新环境</td></tr></tbody></table><h2 id="Packages-and-Channels"><a href="#Packages-and-Channels" class="headerlink" title="Packages and Channels"></a>Packages and Channels</h2><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>conda search PKGNAME=3.1 &quot;PKGNAME [version=&#39;&gt;=3.1.0,&lt;3.2&#39;]&quot;</code></td><td>在当前 channels 搜索包，版本范围 &gt;=3.1.0,&lt;3.2</td></tr><tr><td><code>conda search PKGNAME</code></td><td>搜索包 PKGNAME</td></tr><tr><td><code>conda install -c conda-forge PKGNAME</code></td><td>从指定 channel conda-forge 安装包</td></tr><tr><td><code>conda install PKGNAME==3.1.4</code></td><td>安装指定版本号的包</td></tr><tr><td>`conda install “PKGNAME [version=’3.1.2</td><td>3.1.4’]”`</td></tr><tr><td><code>conda install &quot;PKGNAME&gt;2.5,&lt;3.2&quot;</code></td><td>安装版本在某区间内的包</td></tr><tr><td><code>conda config --add channels CHANNELNAME</code></td><td>添加 channel CHANNELNAME 到当前 conda 设置中</td></tr></tbody></table><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>conda search PKGNAME --info</code></td><td>搜索并输出包 PKGNAME 的详细信息</td></tr><tr><td><code>conda clean --all</code></td><td>删除未使用的缓存文件及包</td></tr><tr><td><code>conda uninstall PKGNAME --name ENVNAME</code></td><td>从环境 ENVNAME 中删除包 PKGNAME</td></tr><tr><td><code>conda update --all --name ENVNAME</code></td><td>更新环境 ENVNAME 中的所有包</td></tr><tr><td><code>conda config --show</code></td><td>检查 conda 设置</td></tr></tbody></table><h2 id="More-Resources"><a href="#More-Resources" class="headerlink" title="More Resources"></a>More Resources</h2><p>Anaconda Cloud：<a href="https://anaconda.org/">https://anaconda.org/</a></p><p>Online Documentation：<a href="https://conda.io/">https://conda.io</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> conda </tag>
            
            <tag> anaconda </tag>
            
            <tag> cheatsheet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jupyter Notebook 安装配置及远程访问</title>
      <link href="posts/3789531152.html"/>
      <url>posts/3789531152.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="conda-安装"><a href="#conda-安装" class="headerlink" title="conda 安装"></a>conda 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install jupyter notebook</span><br></pre></td></tr></table></figure><h3 id="pip-安装"><a href="#pip-安装" class="headerlink" title="pip 安装"></a>pip 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyter</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure><p>执行命令之后，在终端中将会显示一系列notebook的服务器信息，同时浏览器将会自动启动Jupyter Notebook。</p><p>如果是本地访问，可以直接通过终端提示的链接直接访问。而如果为远程访问，则需要进行一定的设置，并使用 <code>token</code> 或者 <code>密码</code> 进行访问。</p><h2 id="远程访问"><a href="#远程访问" class="headerlink" title="远程访问"></a>远程访问</h2><h3 id="临时允许远程访问的方法"><a href="#临时允许远程访问的方法" class="headerlink" title="临时允许远程访问的方法"></a>临时允许远程访问的方法</h3><p>只需在启动notebook的时候，加几个参数即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --ip=<span class="string">&#x27;0.0.0.0&#x27;</span></span><br></pre></td></tr></table></figure><p>其中<code>ip</code>参数代表notebook监听的IP，0.0.0.0表示任何IP都可以连接</p><h3 id="永久可远程访问的方法"><a href="#永久可远程访问的方法" class="headerlink" title="永久可远程访问的方法"></a>永久可远程访问的方法</h3><p>运行 <code>jupyter notebook --generate-config</code>生成配置文件，然后修改里面的配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c.NotebookApp.allow_remote_access = <span class="literal">True</span></span><br><span class="line">c.NotebookApp.ip = ‘<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>’</span><br></pre></td></tr></table></figure><p>修改后下次运行notebook时不用加参数即可远程访问。</p><h3 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h3><p>运行 <code>jupyter notebook --generate-config</code>生成配置文件（如果之前生成过Config配置文件则不需要这一步）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook password</span><br><span class="line">Enter password:</span><br><span class="line">Verify password:</span><br></pre></td></tr></table></figure><p>成功操作后显示写入**.jupyter/jupyter_notebook_config.json**文件，存的是加密过后的密码，之后需要把它写到notebook配置文件中。</p><h3 id="修改config文件"><a href="#修改config文件" class="headerlink" title="修改config文件"></a>修改config文件</h3><p>在 <code>jupyter_notebook_config.py</code> 中找到下面的行，取消注释并修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c.NotebookApp.ip=<span class="string">&#x27;*&#x27;</span>        <span class="comment"># 星号代表任意ip</span></span><br><span class="line">c.NotebookApp.password = <span class="string">u&#x27;sha&#x27;</span>        <span class="comment">#就是把生成的密码json文件里面的一串密码放这里</span></span><br><span class="line">c.NotebookApp.open_browser = <span class="literal">False</span>     <span class="comment">#不自动打开浏览器</span></span><br><span class="line">c.NotebookApp.port = <span class="number">8888</span>            <span class="comment">#可自行指定一个端口, 访问时使用该端口</span></span><br></pre></td></tr></table></figure><h3 id="SSH-端口转发登录-Jupyter-服务器"><a href="#SSH-端口转发登录-Jupyter-服务器" class="headerlink" title="SSH 端口转发登录 Jupyter 服务器"></a>SSH 端口转发登录 Jupyter 服务器</h3><p>远程开启 Jupyter 后，若为外网访问，且内网服务器只开放了 SSH 端口，可通过端口转发登录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ssh -L -f -N &lt;local port&gt;:&lt;remote host&gt;:&lt;remote port&gt; &lt;SSH hostname&gt;</span></span><br><span class="line"><span class="comment"># Ti-Thr 外网</span></span><br><span class="line">ssh -L -f -N 8888:localhost:8888 -p xxxxx username@xxx.xx.xx.xxx</span><br></pre></td></tr></table></figure><p>之后在本地浏览器输入：http:\\localhost:8888 即可登录 Jupyter 服务器进行远程调试。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> jupyter </tag>
            
            <tag> notebook </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 下使用 SSHFS 通过 SSH 协议挂载远程服务器目录</title>
      <link href="posts/505416489.html"/>
      <url>posts/505416489.html</url>
      
        <content type="html"><![CDATA[<p>一般情况下，我们可以通过 samba 协议挂载远程服务器上的文件夹。然而，并非所有服务器都开放了 samba 端口，特别是在外网情况下，通常只会开放一个 ssh 端口。而 sshfs 是通过 ssh 协议模拟的方式，实现将远程服务器上的硬盘挂载到本地。也就是说，只要你的服务器支持ssh连接，你就可以将服务器的硬盘挂载到本地，然后采用本地的方式来操作硬盘里的文件。</p><p>目前 sshfs 的实现有两种方案，其中第一种方案 winfsp + sshfs-win，目前还在持续维护更新，更加建议使用；第二种 win-sshfs + dokan 已经多年未更新（win-sshfs 最近一次更新是 2016 年），也不如第一种高效。</p><h2 id="方式一：winfsp-sshfs-win-（推荐）"><a href="#方式一：winfsp-sshfs-win-（推荐）" class="headerlink" title="方式一：winfsp + sshfs-win （推荐）"></a>方式一：winfsp + sshfs-win （推荐）</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>直接前往 github 对应项目的 release 中下载最新版本即可，需注意 sshfs-win 对 winfsp 的最低版本依赖（下载最新版本一般即可满足）</p><ul><li>sshfs-win：<a href="https://github.com/billziss-gh/sshfs-win/releases">https://github.com/billziss-gh/sshfs-win/releases</a></li><li>winfsp：<a href="https://github.com/billziss-gh/winfsp/releases">https://github.com/billziss-gh/winfsp/releases</a></li></ul><h3 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h3><h4 id="挂载路径"><a href="#挂载路径" class="headerlink" title="挂载路径"></a>挂载路径</h4><p><strong>1. SSH 使用默认端口（22）</strong></p><p>此时，对应的 ssh 登陆命令为 <code>ssh username@remote_ip</code>，那么使用 sshfs-win 挂载远程服务器根目录和 home 目录的地址为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根目录</span></span><br><span class="line">\\sshfs.r\username@remote_ip\</span><br><span class="line"></span><br><span class="line"><span class="comment"># home 目录</span></span><br><span class="line">\\sshfs\username@remote_ip\</span><br><span class="line"><span class="comment"># 或者 \\sshfs.r\username@remote_ip\home\username\</span></span><br></pre></td></tr></table></figure><p>例如：<code>\\sshfs.r\xieqk@10.168.9.87\</code>，注意路径里面的分隔符为 windows 使用的反斜杠 <code>\</code>。</p><p><strong>2. SSH 使用其它端口（外网端口转发连接内网服务器）</strong></p><p>此时，ssh 登陆命令为 <code>ssh -p port username@remote_ip</code>，对应的 sshfs-win 挂载远程服务器根目录和 home 目录的地址在之前的 <code>remote_ip</code> 后加上 <code>!port</code> 即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根目录</span></span><br><span class="line">\\sshfs.r\username@remote_ip!port\</span><br><span class="line"></span><br><span class="line"><span class="comment"># home 目录</span></span><br><span class="line">\\sshfs\username@remote_ip!port\</span><br><span class="line"><span class="comment"># 或者：\\sshfs.r\username@remote_ip!port\home\username\</span></span><br></pre></td></tr></table></figure><p>例如：<code>\\sshfs.r\xieqk@168.10.9.87!34567\</code>。</p><h4 id="登陆挂载远程目录"><a href="#登陆挂载远程目录" class="headerlink" title="登陆挂载远程目录"></a>登陆挂载远程目录</h4><p>将上述 <code>sshfs</code> 路径输入 windows 文件资源管理器地址栏，输入密码即可进入。（<strong>注意：</strong>弹窗中的账号显示的为 windows 的本地账号，不用修改。远程服务器的用户名已经包含在之前的 <code>sshfs</code> 路径之中，所以此处只需正常输入远程用户对应的密码即可。）</p><p>对于常用的远程目录，建议通过 <code>映射网络驱动器</code> 长期挂载于本地。</p><p><img src="https://cdn.jsdelivr.net/gh/xieqk/blog-cdn/imgs/win-sshfs.png" alt="映射网络驱动器"></p><p>在 <code>映射网络驱动器</code> 中，可自行分配驱动器盘号，然后在 <code>文件夹</code> 处输入上述 <code>sshfs</code> 路径，点击完成后在弹出的登录框处输入密码即可完成挂载。</p><p><img src="https://cdn.jsdelivr.net/gh/xieqk/blog-cdn/imgs/win-sshfs-2.png" alt="输入 sshfs 路径"></p><p>之后，可在 windows 文件浏览器的网络位置中看到已经挂载的所有远程目录：</p><p><img src="https://cdn.jsdelivr.net/gh/xieqk/blog-cdn/imgs/win-sshfs-3.png"></p><h3 id="详细参数（可跳过，需要时再查看）"><a href="#详细参数（可跳过，需要时再查看）" class="headerlink" title="详细参数（可跳过，需要时再查看）"></a>详细参数（可跳过，需要时再查看）</h3><p>sshfs-win 具体语法形式如下，其中 <code>[]</code> 中的内容为选填项，若为默认值可不填：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\\sshfs\[LOCUSER=]REMUSER@HOST[!PORT][\PATH]</span><br><span class="line">\\sshfs.r\[LOCUSER=]REMUSER@HOST[!PORT][\PATH]</span><br><span class="line">\\sshfs.k\[LOCUSER=]REMUSER@HOST[!PORT][\PATH]</span><br></pre></td></tr></table></figure><ul><li><p><code>REMUSER</code>: 即 remote user，指 SSH 登陆远程主机时的用户名。</p></li><li><p><code>HOST</code>：远程服务器，如 IP 地址，DNS 服务器名称 或 DNS 服务器 IP 地址</p></li><li><p><code>PORT</code>：SSH 登陆所使用的端口号 (选填，默认为 SSH(22) 端口).</p></li><li><p><code>PATH</code>：进入的远程服务器路径，可按照如下设置:</p><ul><li>前缀 <code>sshfs</code> 对应为 <code>HOST:~REMUSER/PATH</code>，即远程服务器上相对于该用户 <code>home</code> 目录的相对路径：<code>/home/remote_user/PATH</code>。</li><li>前缀 <code>sshfs.r</code> 对应为 <code>HOST:/PATH</code> 即远程服务器上相对于根(root)目录的路径：<code>/PATH</code>。</li><li>前缀 <code>sshfs.k</code> 与第一项相同，对应为 <code>HOST:~REMUSER/PATH</code>，但它使用 Windows 本地当前用户位于 <code>%USERPROFILE%/.ssh/id_rsa</code> 下的 SSH 密钥进行认证（需进行远程服务器配置，可参靠<a href="https://blog.xieqiaokang.com/posts/3517905979.html">SSH 密钥管理及免密码登陆</a>），不需要输入密码。（备注：使用前两项连接时，windows 也会提醒记住密码，所以只需要第一次输入密码并记住即可）</li></ul></li><li><p><code>LOCUSER</code> windows本地用户名，可不填。</p></li></ul><h2 id="方式二：win-sshfs-Dokan（旧，不推荐）"><a href="#方式二：win-sshfs-Dokan（旧，不推荐）" class="headerlink" title="方式二：win-sshfs + Dokan（旧，不推荐）"></a>方式二：win-sshfs + Dokan（旧，不推荐）</h2><h3 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h3><p>win-sshfs 依赖 Dokan，所以先安装 Dokan 再正常安装 win-sshfs 即可：</p><ul><li>Dokan：<a href="https://github.com/dokan-dev/dokany/releases">https://github.com/dokan-dev/dokany/releases</a></li><li>win-sshfs：<a href="https://github.com/feo-cz/win-sshfs/releases">https://github.com/dokan-dev/dokany/releases</a></li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>打开win-sshfs，点击Add，在界面输入要链接的服务器的地址、端口号和用户名密码等信息，并设置好要挂载的目录，点击save，在确保可以通过ssh链接的情况下，点击mount，就可以将该目录挂载到本地了，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/xieqk/blog-cdn/imgs/win-sshfs-4.png" alt="win-sshfs 配置"></p><p>查看我的电脑，发现在 <code>设备和驱动器</code> 中多了一个存储设备（与方式一显示在网络位置中不同），如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/xieqk/blog-cdn/imgs/win-sshfs-5.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> SSH </tag>
            
            <tag> Windows </tag>
            
            <tag> SSHFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH密钥管理及免密码登陆</title>
      <link href="posts/3517905979.html"/>
      <url>posts/3517905979.html</url>
      
        <content type="html"><![CDATA[<p>SSH 免密码登录远程服务器，Github，gitee 等，以及 SSH config 的配置</p><p><strong>需求：</strong>在机器 A 上，免密码 ssh 登录到机器 B。</p><h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><h3 id="在机器-A-上生成公钥-私钥对"><a href="#在机器-A-上生成公钥-私钥对" class="headerlink" title="在机器 A 上生成公钥/私钥对"></a>在机器 A 上生成公钥/私钥对</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>一路回车，会在用户目录的 <code>.ssh</code> 文件夹下生成密钥对 <code>id_rsa</code> 和 <code>id_rsa.pub</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/xieqk/blog-cdn/imgs/ssh-key-free.png" alt="生成的密钥对"></p><p>也可生成多个密钥自行改名，后在 <code>config</code> 中配置不同主机使用不同的密钥。</p><h3 id="将机器-A-生成的公钥复制到机器-B-中"><a href="#将机器-A-生成的公钥复制到机器-B-中" class="headerlink" title="将机器 A 生成的公钥复制到机器 B 中"></a>将机器 A 生成的公钥复制到机器 B 中</h3><p>可用 <code>ssh-copy-id</code> 命令将机器 A 生成的公钥 <code>id_rsa.pub</code> 复制到机器 B 中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># username@host_ip</span></span><br><span class="line">ssh-copy-id -i id_rsa.pub xieqiaokang@192.168.6.31 </span><br></pre></td></tr></table></figure><p>如果远程服务器不在内网之中，而是通过一个外网 IP 的 xxxxx 端口转发登陆ssh，则与 ssh 登陆一样，指定端口号即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># username@host_public_ip -p port</span></span><br><span class="line">ssh-copy-id -i id_rsa.pub xieqiaokang@202.38.xx.xxx -p xxxxx </span><br></pre></td></tr></table></figure><h3 id="登录到远程机器不用输入密码"><a href="#登录到远程机器不用输入密码" class="headerlink" title="登录到远程机器不用输入密码"></a>登录到远程机器不用输入密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh xieqiaokang@192.168.6.31</span><br><span class="line"><span class="comment"># ssh xieqiaokang@202.38.xx.xxx -p xxxxx    # 若存在端口转发</span></span><br></pre></td></tr></table></figure><p>到此，我们就已经可以直接使用 ssh 免密码登陆服务器了。</p><h3 id="配置-github，gitee-等使用密钥认证"><a href="#配置-github，gitee-等使用密钥认证" class="headerlink" title="配置 github，gitee 等使用密钥认证"></a>配置 github，gitee 等使用密钥认证</h3><p>github，gitee 等代码托管平台同样支持 ssh 验证，此时上文的机器 B 就可以是 github 对应的主机。github 与 gitee 等都提供了上传公钥的选项，如在 github 中，网页端登陆自己的账号后，进入 <code>settings -&gt; SSH and GPG keys -&gt; New SSH key</code> 即可上传自己的 ssh 公钥，<code>Title</code> 为给自己本地计算机取的名字，如“matebook”，方便记忆该密钥属于哪台主机。<code>Key</code> 则为本地公钥 <code>id_rsa.pub</code> 里面的内容，可以文本编辑器打开后复制上去。</p><p><img src="https://cdn.jsdelivr.net/gh/xieqk/blog-cdn/imgs/ssh-key-free-2.png" alt="github SSH 公钥上传界面"></p><p>上传成功后，就可以在 SSH 界面看到已经上传的界面，可将自己的不同电脑的公钥都上传上去，这样在这些电脑上通过 ssh 使用 github 远程仓库时，便可直接通过密钥认证而不需要每次都输入密码。gitee，coding 等托管平台同样支持 ssh key 认证，可以设置里面查看。</p><p><img src="https://cdn.jsdelivr.net/gh/xieqk/blog-cdn/imgs/ssh-key-free-3.png" alt="上传成功后的SSH密钥管理界面"></p><p>此时，可通过一下命令在本地验证密钥是否配置成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git -T git@github.com</span><br><span class="line">git -T git@gitee.com</span><br></pre></td></tr></table></figure><p>如果出现以下结果，说明配置已经成功，红框里面的内容为自己在对应平台上的账号名</p><p><img src="https://cdn.jsdelivr.net/gh/xieqk/blog-cdn/imgs/ssh-key-free-4.png" alt="github、gitee SSH key 验证"></p><h2 id="config-文件配置（可选）"><a href="#config-文件配置（可选）" class="headerlink" title="config 文件配置（可选）"></a>config 文件配置（可选）</h2><p>经过上述的步骤，我们已经完成了 ssh 通过密钥验证的基本设置，一般情况下可不必再对 <code>config</code> 做额外的配置。如果想要简化每台主机的登陆（取别名，免去每次登陆都需要输入<code>用户名@IP地址</code>），或者想要给每台主机，或者 github，gitee 配置不同的密钥，那么在将不同的公钥上传至对应主机后，则需要配置 <code>config</code> 为每台主机指定对应的私钥进行配对验证。在本地用户目录的 <code>.ssh</code> 下，查看是否有 <code>config</code> 文件，如果没有则创建该空白文本文件，然后按照以下格式填写每台主机。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host ti3                                    # 主机名，随便取</span><br><span class="line">    HostName 202.38.xx.xxx                      # 主机IP（机器B）</span><br><span class="line">    Port xxxxx                                  # 若为默认端口22，可不设定此项</span><br><span class="line">    User xieqiaokang                        # 在机器B上的用户名</span><br><span class="line">    IdentityFile C:\Users\xieqk\.ssh\id_rsa     # 本机私钥路径，若为默认的 id_rsa，则可不填</span><br></pre></td></tr></table></figure><p>其中，如果符合默认设置的内容则可不填。<code>User</code> 正常情况下填自己在远程服务器下的用户名，但对于 github 或 gitee 等平台，<code>User</code> 项需填写为 <code>git</code>，具体可参考如下配置。</p><p><img src="https://cdn.jsdelivr.net/gh/xieqk/blog-cdn/imgs/ssh-key-free-5.png" alt="ssh config 配置文件"></p><p>此时，可通过之前提到的 <code>ssh -T git@github.com</code> 操作验证 github 密钥配置是否成功。此外，由于给自己的远程主机配置了 <code>ti3</code> 的别名，此时可直接通过以下简化的命令登陆该远程服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh ti3     <span class="comment"># 等效于 ssh xieqiaokang@192.168.6.31</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python OpenCV 常用操作</title>
      <link href="posts/1153766715.html"/>
      <url>posts/1153766715.html</url>
      
        <content type="html"><![CDATA[<h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><h3 id="读、写、展示"><a href="#读、写、展示" class="headerlink" title="读、写、展示"></a>读、写、展示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(img_path)</span><br><span class="line">cv2.imwrite(save_path, img)</span><br><span class="line">cv2.imshow(name_of_window, img)</span><br></pre></td></tr></table></figure><h3 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">img.shape<span class="comment"># (rows, columns, channels)</span></span><br><span class="line">img.size<span class="comment"># (total number of pixels)</span></span><br><span class="line">img.dtype<span class="comment"># (datatype of image)</span></span><br><span class="line">img2 = cv2.resize(img, (w,h), interpolation)<span class="comment"># interpolation=cv2.INTER_CUBIC</span></span><br></pre></td></tr></table></figure><h3 id="画矩形框"><a href="#画矩形框" class="headerlink" title="画矩形框"></a>画矩形框</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># color:(*,*,*)</span></span><br><span class="line"><span class="comment"># thickness:粗细(thickness=-1表示填充效果)</span></span><br><span class="line">cv2.rectangle(img, (x,y), (x+w,y+h), color, thickness=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="画圆"><a href="#画圆" class="headerlink" title="画圆"></a>画圆</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># r:半径</span></span><br><span class="line">cv2.circle(img, (x,y), r, color, thickness)</span><br></pre></td></tr></table></figure><h3 id="绘制文字"><a href="#绘制文字" class="headerlink" title="绘制文字"></a>绘制文字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># e.g. font = cv2.FONT_HERSHEY_COMPLEX</span></span><br><span class="line"><span class="comment"># thickness=-1表示填满</span></span><br><span class="line">cv2.putText(img, <span class="string">&#x27;text&#x27;</span>, (x,y), font, size, color, thickness)</span><br></pre></td></tr></table></figure><h3 id="Resize"><a href="#Resize" class="headerlink" title="Resize"></a>Resize</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv2.resize(img, (w,h))</span><br></pre></td></tr></table></figure><h3 id="PIL-Image-和-OpenCV-图像格式转换"><a href="#PIL-Image-和-OpenCV-图像格式转换" class="headerlink" title="PIL.Image 和 OpenCV 图像格式转换"></a>PIL.Image 和 OpenCV 图像格式转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PIL 转 OpenCV</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;1.jpg&#x27;</span>)</span><br><span class="line">img = cv2.cvtColor(numpy.asarray(img), cv2.COLOR_RGB2BGR)</span><br><span class="line"></span><br><span class="line"><span class="comment"># OpenCV 转 PIL</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;1.jpg&#x27;</span>)</span><br><span class="line">img = Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))</span><br></pre></td></tr></table></figure><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><h3 id="写视频"><a href="#写视频" class="headerlink" title="写视频"></a>写视频</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义视频参数</span></span><br><span class="line">fps = <span class="number">30</span></span><br><span class="line">fourcc = cv2.VideoWriter_fourcc(*<span class="string">&#x27;DIVX&#x27;</span>)</span><br><span class="line">writer = cv2.VideoWriter(video_name, fourcc, fps, (w,h))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入视频帧</span></span><br><span class="line"><span class="keyword">for</span> ...</span><br><span class="line">writer.write(img)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放</span></span><br><span class="line">writer.release()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> opencv </tag>
            
            <tag> cv2 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
